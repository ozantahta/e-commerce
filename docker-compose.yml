version: '3.8'

services:
  # RabbitMQ with Management UI
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: e-commerce-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - e-commerce-network

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: e-commerce-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: e-commerce
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - e-commerce-network

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    container_name: e-commerce-order-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/e-commerce?authSource=admin
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      LOG_LEVEL: info
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - e-commerce-network
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: services/inventory-service/Dockerfile
    container_name: e-commerce-inventory-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/e-commerce?authSource=admin
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      LOG_LEVEL: info
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - e-commerce-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    container_name: e-commerce-notification-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/e-commerce?authSource=admin
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      LOG_LEVEL: info
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - e-commerce-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: e-commerce-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - order-service
      - inventory-service
      - notification-service
    networks:
      - e-commerce-network
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
  mongodb_data:
    driver: local

networks:
  e-commerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
